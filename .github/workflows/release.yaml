name: Release
run-name: ${{ inputs.version }}

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to use (e.g. v1.2.3)'
        required: true

env:
  app_name: DungeonRS
  CARGO_TERM_COLOR: always
  # Disable incremental compilation for faster from-scratch builds
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0

  # OSX variables
  app_id: dealloc.dungeon_rs
jobs:
  changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      pull-requests: read
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      version_without_v: ${{ steps.set_version.outputs.version_without_v }}
    steps:
      - name: Set Version
        id: set_version
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF##*/}"
          fi

          VERSION_WITHOUT_V="${VERSION#v}"

          echo "VERSION=$VERSION"
          echo "VERSION_WITHOUT_V=$VERSION_WITHOUT_V"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_without_v=$VERSION_WITHOUT_V" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - uses: taiki-e/install-action@git-cliff

      - name: Generate CHANGELOG.md
        run: git-cliff --latest --output CHANGELOG.md

      - name: Combine previous body and new changelog
        shell: bash
        run: |
          printf '%s\n\n' "${{ github.event.release.body }}" > RELEASE_BODY.md
          cat CHANGELOG.md >> RELEASE_BODY.md

      - uses: actions/upload-artifact@v4
        with:
          name: release-body-md
          path: RELEASE_BODY.md

  licenses:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-about

      - name: Generate THIRD-PARTY-LICENSES.html
        shell: bash
        run: cargo about generate about.hbs > THIRD-PARTY-LICENSES.html

      - uses: actions/upload-artifact@v4
        with:
          name: third-party-licenses-html
          path: THIRD-PARTY-LICENSES.html

  build:
    name: Build ${{ matrix.label }}
    needs:
      - changelog
      - licenses
    permissions:
      contents: write
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # When creating a new entry in the matrix, the following template should be used:
#          - platform: linux/windows/macos => the OS, used for platform specific build tasks
#            label: this is the artefact name that will be generated in the release, should be unique and descriptive
#            binary: The package name of the binary that is being built
#            profile: The Cargo.toml profile used for compiling this entry
#            target: The triple target that's being built
#            features: A comma separated list of features that should be enabled for this build
#            package_ext: A platform specific extension of the package produced
#            runner: The runner for the Github Action to use

          - platform: linux
            label: editor-linux
            binary: editor
            profile: release
            target: x86_64-unknown-linux-gnu
            features: editor/no_console,editor/jpeg,editor/webp
            package_ext: .zip
            runner: ubuntu-latest

          - platform: windows
            label: editor-windows
            binary: editor
            profile: release
            target: x86_64-pc-windows-msvc
            features: editor/no_console,editor/jpeg,editor/webp
            binary_ext: .exe
            package_ext: .zip
            runner: windows-latest

          - platform: macos
            label: editor-macos
            binary: editor
            profile: release
            target: aarch64-apple-darwin
            features: editor/no_console,editor/jpeg,editor/webp
            app_suffix: .app/Contents/MacOS
            package_ext: .dmg
            runner: macos-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Set up environment
        if: ${{ matrix.platform == 'macos' }}
        run: |
          echo 'MACOSX_DEPLOYMENT_TARGET=11.0' >> "${GITHUB_ENV}" # macOS 11.0 Big Sur is the first version to support universal binaries.
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> "${GITHUB_ENV}"

      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Setup ImageMagick
        if: ${{ matrix.platform == 'macos' }}
        uses: mfinelli/setup-imagemagick@v7

      - name: Update version to ${{ needs.changelog.outputs.version }} in Cargo.toml
        shell: pwsh
        run: |
          $ver = "${{ needs.changelog.outputs.version_without_v }}"
          (Get-Content Cargo.toml -Raw) `
            -replace '(?m)^version\s*=\s*".*"$', "version = `"$ver`"" |
            Set-Content Cargo.toml

      - name: Build ${{ matrix.label }} binaries
        run: cargo build --profile=${{ matrix.profile }} --package ${{ matrix.binary }} --target="${{ matrix.target }}" --features='${{ matrix.features }}'

      - name: Download licenses artefact
        uses: actions/download-artifact@v5
        with:
          name: third-party-licenses-html

      - name: Generate package files for ${{ matrix.label }}
        run: |
          mkdir -p tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}${{ matrix.app_suffix }}
          cp -r ./assets tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}${{ matrix.app_suffix }}
          cp -r ./locales tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}${{ matrix.app_suffix }}
          mv target/${{ matrix.target }}/release/${{ matrix.binary }}${{ matrix.binary_ext }} tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}${{ matrix.app_suffix }}

      - name: Package Linux package
        if: ${{ matrix.platform == 'linux' }}
        working-directory: tmp/${{ matrix.label }}/${{ matrix.binary }}
        run: |
          cp $GITHUB_WORKSPACE/THIRD-PARTY-LICENSES.html ${{ matrix.binary }}
          zip --recurse-paths '${{ matrix.binary }}-${{ matrix.label }}${{ matrix.package_ext }}' '.'

      - name: Package OSX package
        if: ${{ matrix.platform == 'macos' }}
        working-directory: tmp/${{ matrix.label }}/${{ matrix.binary }}
        run: |
          mkdir -p /tmp/${{ matrix.label }}/icons.iconset
          mkdir -p '${{ matrix.binary }}${{ matrix.app_suffix }}/../Resources'
          cp $GITHUB_WORKSPACE/THIRD-PARTY-LICENSES.html '${{ matrix.binary }}${{ matrix.app_suffix }}/../Resources'
          mv '${{ matrix.binary }}${{ matrix.app_suffix }}/assets' '${{ matrix.binary }}${{ matrix.app_suffix }}/../Resources'
          mv '${{ matrix.binary }}${{ matrix.app_suffix }}/locales' '${{ matrix.binary }}${{ matrix.app_suffix }}/../Resources'
          magick ../../../assets/logo.png -resize 16x16     "/tmp/${{ matrix.label }}/icons.iconset/icon_16x16.png"
          magick ../../../assets/logo.png -resize 32x32     "/tmp/${{ matrix.label }}/icons.iconset/icon_16x16@2x.png"
          magick ../../../assets/logo.png -resize 32x32     "/tmp/${{ matrix.label }}/icons.iconset/icon_32x32.png"
          magick ../../../assets/logo.png -resize 64x64     "/tmp/${{ matrix.label }}/icons.iconset/icon_32x32@2x.png"
          magick ../../../assets/logo.png -resize 128x128   "/tmp/${{ matrix.label }}/icons.iconset/icon_128x128.png"
          magick ../../../assets/logo.png -resize 256x256   "/tmp/${{ matrix.label }}/icons.iconset/icon_128x128@2x.png"
          magick ../../../assets/logo.png -resize 256x256   "/tmp/${{ matrix.label }}/icons.iconset/icon_256x256.png"
          magick ../../../assets/logo.png -resize 512x512   "/tmp/${{ matrix.label }}/icons.iconset/icon_256x256@2x.png"
          magick ../../../assets/logo.png -resize 512x512   "/tmp/${{ matrix.label }}/icons.iconset/icon_512x512.png"
          magick ../../../assets/logo.png -resize 1024x1024 "/tmp/${{ matrix.label }}/icons.iconset/icon_512x512@2x.png"
          iconutil -c icns "/tmp/${{ matrix.label }}/icons.iconset" -o "${{ matrix.binary }}${{ matrix.app_suffix }}/../Resources/AppIcon.icns"

          cat >'${{ matrix.binary }}${{ matrix.app_suffix }}/../Info.plist' <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
                <dict>
                    <key>CFBundleDevelopmentRegion</key>
                    <string>en</string>
                    <key>CFBundleDisplayName</key>
                    <string>${{ env.app_name }}</string>
                    <key>CFBundleExecutable</key>
                    <string>${{ matrix.binary }}</string>
                    <key>CFBundleIdentifier</key>
                    <string>${{ env.app_id }}</string>
                    <key>CFBundleIconFile</key>
                    <string>AppIcon</string>
                    <key>CFBundleName</key>
                    <string>${{ env.app_name }}</string>
                    <key>CFBundleShortVersionString</key>
                    <string>v${{ steps.get_version.outputs.version-without-v }}</string>
                    <key>CFBundleVersion</key>
                    <string>v${{ steps.get_version.outputs.version-without-v }}</string>
                    <key>CFBundleInfoDictionaryVersion</key>
                    <string>6.0</string>
                    <key>CFBundlePackageType</key>
                    <string>APPL</string>
                    <key>CFBundleSupportedPlatforms</key>
                    <array>
                        <string>MacOSX</string>
                    </array>
                </dict>
            </plist>
          EOF

          ln -s /Applications .
          codesign --deep --force --sign - "${{ matrix.binary }}.app"
          hdiutil create -fs HFS+ -volname ${{ matrix.binary }} -srcfolder . '${{ matrix.binary }}-${{ matrix.label }}${{ matrix.package_ext }}'

      - name: Package Windows package
        if: ${{ matrix.platform == 'windows' }}
        working-directory: tmp/${{ matrix.label }}/${{ matrix.binary }}
        shell: pwsh
        run: |
          Copy-Item "$env:GITHUB_WORKSPACE/THIRD-PARTY-LICENSES.html" ${{ matrix.binary }}
          Compress-Archive -Path ${{ matrix.binary }} -DestinationPath '${{ matrix.binary }}-${{ matrix.label }}${{ matrix.package_ext }}'

      - uses: actions/download-artifact@v5
        with:
          name: release-body-md

      # Update the GitHub release with the manifest and module archive files.
      - name: Update Release With Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.unpublished }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'tmp/${{ matrix.label }}/${{ matrix.binary }}/${{ matrix.binary }}-${{ matrix.label }}${{ matrix.package_ext }}'
          tag: ${{ needs.changelog.outputs.version }}
          bodyFile: RELEASE_BODY.md
